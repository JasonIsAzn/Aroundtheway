@{
    ViewData["Title"] = "Register";
}

<div class="auth-container">
    <div class="auth-box">
        <h2>Create Account</h2>
        
        @if (!string.IsNullOrEmpty(ViewData["Error"] as string))
        {
            <div class="alert alert-danger">
                @ViewData["Error"]
            </div>
        }

        <form id="registerForm" method="POST" action="/account/register">
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" id="email" name="Email" required>
                <span class="text-danger field-validation-valid" data-valmsg-for="Email" data-valmsg-replace="true"></span>
            </div>

            <div class="form-group">
                <label for="firstName">First Name</label>
                <input type="text" class="form-control" id="firstName" name="FirstName" required maxlength="50">
                <span class="text-danger field-validation-valid" data-valmsg-for="FirstName" data-valmsg-replace="true"></span>
            </div>

            <div class="form-group">
                <label for="lastName">Last Name</label>
                <input type="text" class="form-control" id="lastName" name="LastName" required maxlength="50">
                <span class="text-danger field-validation-valid" data-valmsg-for="LastName" data-valmsg-replace="true"></span>
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" id="password" name="Password" required minlength="8">
                <span class="text-danger field-validation-valid" data-valmsg-for="Password" data-valmsg-replace="true"></span>
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <input type="password" class="form-control" id="confirmPassword" name="ConfirmPassword" required>
                <span class="text-danger field-validation-valid" data-valmsg-for="ConfirmPassword" data-valmsg-replace="true"></span>
            </div>

            <button type="submit" class="btn btn-primary w-100">Register</button>
        </form>

        <div class="mt-3 text-center">
            <p>Already have an account? <a href="/account/login">Log in</a></p>
        </div>

        <div class="divider">
            <span>or</span>
        </div>

        <button onclick="handleGoogleSignIn()" class="btn btn-outline-dark w-100">
            <img src="/images/google-logo.png" alt="Google" style="width: 18px; margin-right: 8px;">
            Continue with Google
        </button>
    </div>
</div>

@section Scripts {
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <script>
        const registerForm = document.getElementById('registerForm');
        
        registerForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (password !== confirmPassword) {
                alert('Passwords do not match');
                return;
            }
            
            try {
                const response = await fetch('/api/auth/register', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ email, password })
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.title || error.message || 'Failed to register');
                }
                
                window.location.href = '/account/login?message=Registration successful. Please log in.';
            } catch (error) {
                alert(error.message || 'Failed to register');
            }
        });

        let googleClient;
        
        function handleGoogleSignIn() {
            if (!googleClient) {
                googleClient = google.accounts.oauth2.initCodeClient({
                    client_id: '370878605755-ag67ab20l16ebblvkt5bbf65kcd5p40s.apps.googleusercontent.com',
                    scope: 'email profile',
                    callback: async (response) => {
                        try {
                            const result = await fetch('/api/auth/google', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    idToken: response.credential
                                })
                            });

                            if (!result.ok) {
                                const error = await result.json();
                                throw new Error(error.message || 'Google sign-in failed');
                            }

                            window.location.href = '/';
                        } catch (error) {
                            alert(error.message || 'Failed to sign in with Google');
                        }
                    }
                });
            }
            
            googleClient.requestCode();
        }
    </script>
}